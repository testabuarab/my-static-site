<?php
/**
 * Upvote plugin for Craft CMS
 *
 * Lets your users upvote/downvote, "like", or favorite any type of element.
 *
 * @author    Double Secret Agency
 * @link      https://www.doublesecretagency.com/
 * @copyright Copyright (c) 2014 Double Secret Agency
 */

namespace doublesecretagency\upvote\controllers;

use Craft;
use craft\web\Controller;
use doublesecretagency\upvote\Upvote;
use yii\web\Response;

/**
 * Class PageController
 * @since 2.1.0
 */
class PageController extends Controller
{

    /**
     * @inheritdoc
     */
    protected array|bool|int $allowAnonymous = true;

    /**
     * Check the preload config setting.
     *
     * @return Response
     */
    public function actionPreload(): Response
    {
        // Get preload config setting
        $preload = (bool) Upvote::$plugin->getSettings()->preload;

        // Return whether preloading is enabled
        return $this->asJson([
            'enabled' => $preload
        ]);
    }

    /**
     * Generate a valid CSRF token & name.
     *
     * @return Response
     */
    public function actionCsrf(): Response
    {
        // Get request service
        $request = Craft::$app->getRequest();

        // Return CSRF token as JSON
        return $this->asJson([
            $request->csrfParam => $request->getCsrfToken()
        ]);
    }

    /**
     * Configure all DOM elements generated by Upvote.
     *
     * @return Response
     */
    public function actionConfigure(): Response
    {
        // Initialize list of elements to compile
        $data = [];

        // Get POST values
        $ids = Craft::$app->getRequest()->getBodyParam('ids[]');

        // If IDs are not an array, or are empty, bail
        if (!is_array($ids) || empty($ids)) {
            return $this->asJson('Invalid IDs, unable to configure Upvote elements.');
        }

        // Loop through IDs provided
        foreach ($ids as $itemKey) {
            // Compile individual element
            $data[] = Upvote::$plugin->upvote->compileElementData($itemKey);
        }

        // Return response data
        return $this->asJson($data);
    }

}
